<?xml-stylesheet type="text/xsl" href="datatypes.xsl"?>
<datatypes xmlns="http://www.jenitennison.com/datatypes"
           ns="http://www.example.com/datatypes"
           xmlns:my="http://www.example.com/datatypes"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.jenitennison.com/datatypes
                               datatypes.xsd">

<datatype name="decimal">
  <parse>
    <group name="sign">
      <optional>
        <string>+</string>
        <string>-</string>
      </optional>
    </group>
    <group name="whole-part">
      <ref name="DIGITS" />
    </group>
    <optional>
      <string>.</string>
      <group name="fraction-part">
        <ref name="DIGITS" />
      </group>
    </optional>
  </parse>
  <params>
    <param name="signed" select="sign" />
    <param name="minInclusive" test="le" as="number" />
    <param name="maxInclusive" test="ge" as="number" />
    <param name="minExclusive" test="lt" as="number" />
    <param name="maxExclusive" test="gt" as="number" />
    <param name="decimalPlaces" test="eq" select="string-length(fraction-part)" as="number" />
  </params>
  <normalize>
    <if test="sign = '-'">
      <copy-of select="sign" />
    </if>
    <my:whole-part><value-of select="format-number(whole-part, '0')" /></my:whole-part>
    <if test="fraction-part != 0">
      <text>.</text>
      <my:fraction-part><value-of select="replace(fraction-part, '0*$', '')" /></my:fraction-part>
    </if>
  </normalize>
  <compare as="number" />
</datatype>

<datatype name="price">
  <supertype name="decimal">
    <params>
      <param name="signed">false</param>
      <param name="minExclusive">0</param>
      <param name="decimalPlaces">2</param>
    </params>
    <cast>
      <if test="not(sign = '-')">
        <copy-of select="whole-part" />
        <text>.</text>
        <my:fraction-part><value-of select="substring(concat(fraction-part, '00'), 1, 2)" /></my:fraction-part>
      </if>
    </cast>
  </supertype>
</datatype>

<datatype name="ISODate">
  <parse>
    <data type="year" />
    <string>-</string>
    <data type="month" />
    <string>/</string>
    <data type="day" />
  </parse>
  <validate>
    <report test="day > 30 and month = (4, 6, 9, 11)">Month <value-of select="month" /> only has 30 days.</report>
    <report test="month = 2 and day > 29">February never has more than 29 days.</report>
    <report test="month = 2 and day = 29 and
                  (year mod 4 or (not(year mod 100) and year mod 400))">In <value-of select="year" />, February had 28 days.</report>
  </validate>
  <compare>
    <compare path="year" as="number" />
    <compare path="month" />
    <compare path="day" />
  </compare>
</datatype>

<datatype name="UKDate">
  <parse>
    <data type="day" />
    <string>/</string>
    <data type="month" />
    <string>/</string>
    <data type="year" />
  </parse>
  <validate as="ISODate" />
  <compare as="ISODate" />
</datatype>

<cast from="UKDate" to="ISODate">
  <sequence select="year" />
  <text>-</text>
  <sequence select="month" />
  <text>-</text>
  <sequence select="day" />
</cast>

<cast from="ISODate" to="UKDate">
  <sequence select="day" />
  <text>/</text>
  <sequence select="month" />
  <text>/</text>
  <sequence select="year" />
</cast>

<datatype name="day">
  <parse>
    <repeat exactly="2">
      <ref name="DIGIT" />
    </repeat>
  </parse>
  <validate>
    <assert test=". > 0 and . &lt;= 31">The day must be between 1 and 31</assert>
  </validate>
</datatype>

<datatype name="month">
  <parse>
    <repeat exactly="2">
      <ref name="DIGIT" />
    </repeat>
  </parse>
  <validate>
    <assert test=". > 0 and . &lt;= 12">The month must be between 1 and 12</assert>
  </validate>
</datatype>

<datatype name="year">
  <parse>
    <repeat min="4">
      <ref name="DIGIT" />
    </repeat>
  </parse>
  <validate>
    <report test=". = 0">There is no year 0</report>
  </validate>
</datatype>

<define name="DIGIT">
  <charGroup>
    <range from="0" to="9" />
  </charGroup>
</define>

<define name="DIGITS">
  <oneOrMore>
    <ref name="DIGIT" />
  </oneOrMore>
</define>

</datatypes>