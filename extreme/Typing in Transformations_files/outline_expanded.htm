<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../Typing%20in%20Transformations.html";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=white text=purple link=purple vlink=purple alink=purple>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0001.htm');">Typing in Transformations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Jeni Tennison</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>jeni@jenitennison.com</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>http://www.jenitennison.com</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0040.htm');">Overview</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Disclaimer</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Background &amp; motivations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Will XSLT 1.0 stylesheets still run?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Can you write XSLT 2.0 in the same way?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>conformance levels</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>strong typing</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>XPath 2.0 type system</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>casting rules</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>typing variables and parameters</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Conclusions</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0041.htm');">Disclaimer</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Representing my own views, not those of
  the XSL Working Group</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>This talk focuses on the negative, but…</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>XSLT 2.0 is a real improvement</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>temporary trees</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>grouping support</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>regular expression support</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>multiple output documents</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>user-defined functions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>XPath 2.0 has some nice new features</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>sequences</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>conditional expressions</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0005.htm');">XPath 2.0 Type-Related
Changes</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Two main motivations:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>alignment with W3C XML Schema</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>adopt WXS datatypes</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>use typing information from PSVI</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>support for static typing</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>ability to check query/transformation
  prior to execution</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Strong typing is a side-effect</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>need strong typing to support static
  typing in the face of polymorphic operators</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0002.htm');">XSLT Users' Concerns</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>XSLT/XPath 1.0 users are worried</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>will their old transformations still
  run?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>will they be able to use XSLT 2.0 in
  the same way as they did XSLT 1.0?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>General reassurance</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>&quot;you can just ignore the new
  type-related features&quot;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>&quot;you will get benefit from the new
  type-related features&quot;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Is this true?</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0042.htm');">Will it Still Run? (1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Stylesheet with version=&quot;1.0&quot;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>XSLT 2.0 processor</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>with backwards compatibility feature</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>issues a warning</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>runs in &quot;XPath 1.0 compatibility
  mode&quot;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>without backwards compatibility feature</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>gives an error</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>in immediate future, most will support
  backwards compatibility feature</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Compatibility mode makes XPath 1.0
  expressions work in XPath 1.0 way</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>implicit casting to required type</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>meant to aid transition to 2.0
  processor</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0006.htm');">Will It Still Run? (2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Yes, it should still run</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>However, some incompatibilities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>XPath 2.0 Appendix F</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>we think they are minor and/or rare</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>we hope to clear up as many as possible</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Try your XSLT 1.0 stylesheets with
  Saxon 7.6.5</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>tell us if there are unlisted
  incompatibilities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>tell us if the incompatibilities are a
  big problem</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0043.htm');">Can I Write it in the Same
Way?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Do you have to learn about type-related
  changes?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>If you do, do the type-related changes
  give you enough benefits to be worth it?</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0003.htm');">XSLT 2.0 Conformance</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Two levels of XSLT processors</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Basic XSLT processors</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>includes built-in XPath 2.0 types</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>nodes cannot have types associated with
  them</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Schema-Aware XSLT processors</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>can include user-defined types (from
  schema)</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>nodes can have types associated with
  them</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Assume Basic XSLT processor</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>most common processor in near future</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>guarantees stylesheet portability</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>likely to be smaller and faster</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>avoids potential schema access problems</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0004.htm');">Basic XSLT Assumption</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Oh dear… most type-related benefits
  ruled out already</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>no static type checking (processor
  option)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>no information from schemas (not
  permitted)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>so:</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>no errors when you mis-spell an element
  name</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>no checks of input to make sure it's
  what you expect</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>no guarantee that stylesheet generates
  a valid document</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>no using substitution groups or types
  to simplify template match patterns</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Hope it's easy to learn, or that there
  are other benefits…</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0008.htm');">Strong vs. Weak Typing</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>XPath 1.0 is weakly typed; XPath 2.0 is
  strongly typed</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Lots of definitions of &quot;strong
  typing&quot;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Typing in XPath 2.0 differs from XPath
  1.0 in three ways:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>more complex type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>explicit casting is required in more
  circumstances</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>variables and parameters are typed</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0009.htm');">More Complex Type System</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Based on WXS datatypes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Everything is a sequence</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Sequences hold items</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Items can be nodes or atomic values</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>no sequences of sequences</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Atomic values have types (see next)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Nodes have types and typed values</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>unvalidated nodes assigned a general
  type</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>unvalidated nodes have typed value of
  type xdt:untypedAtomic</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0010.htm');">Atomic Types</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0011.htm');">Important Atomic Types</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:string (string)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:token</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:boolean (boolean)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:QName</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:double (number)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:integer</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:dateTime</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:date</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xs:time</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xdt:yearMonthDuration</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xdt:dayTimeDuration</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>xdt:untypedAtomic</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0027.htm');">Implications of Type
Hierarchy</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>It's a bit overwhelming…</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>lots of types</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>differences from XML Schema type system</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>new types, altered hierarchy, changed
  definitions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>…but there are only a few you really
  need</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>New types are really useful in some
  stylesheets</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>date/time arithmetic and sorting</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Top of stylesheet needs namespace
  declarations</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>usually automatically generated</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0019.htm');">Casting in XPath 1.0</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Casting is usually implicit</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>values are automatically cast to what
  they need to be</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>can use string(), number() and boolean()
  to override</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Type errors are rare</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>using string/RTF when node-set is
  required</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>casting rules mean every legal cast
  works</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>e.g. strings that aren't numeric cast
  to NaN</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Rules seem a bit arbitrary but
  &quot;just work&quot; almost all the time</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0020.htm');">Casting in XPath 2.0</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Casting is usually explicit</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>but untyped values (from unvalidated
  nodes) are automatically cast to what they need to be</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>must use constructor functions or cast
  expressions otherwise</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Type-related errors are more common</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>type errors if you try to cast between
  types where casting isn't allowed</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>e.g. cast a xs:gYear to an xs:integer</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>dynamic errors if a value can't be cast
  to the new type</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>e.g. cast the xs:string 'rubbish' to an
  xs:double</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>no way to catch errors</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>check castability before you try to
  cast</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0039.htm');">Casting Atomic Values</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Manipulating strings</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Doing arithmetic</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0037.htm');">Casting Node Sequences</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>First-item semantics in XPath 1.0</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>if single value expected, use first
  node in node-set</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Error in XPath 2.0</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>This is usually a useful catch</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>confusing to rely on first-item
  semantics</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0044.htm');">Casting Untyped Values (1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Cast to required type for function</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Cast to xs:string for value comparison</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0031.htm');">Casting Untyped Values (2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>General comparisons cast to type of
  other operand</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>if other operand is untyped, cast to
  string</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>alphabetic comparisons by default</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>cast explicitly to get numeric
  comparisons</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0032.htm');">Casting Untyped Values (3)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Arithmetic operators cast to xs:double</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>result is therefore of type xs:double</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0033.htm');">Implications of Casting
Rules</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Lots of explicit casting is needed</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>convert typed values to required type
  for functions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>convert untyped values to required type
  for polymorphic operators</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>convert untyped values to type that
  will give correctly typed result</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>To avoid type-related errors:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>need to learn casting rules</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>need to keep track of types of values</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>need to check castability of values</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Some gotchas are silent</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>alphabetic rather than numeric
  comparison</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Useful catch of misused first-item
  semantics</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0013.htm');">Typed Variables and
Parameters</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>XSLT 2.0 variables and parameters have
  types</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>value for variable/parameter must match
  declared type, otherwise error is raised</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Type declarations in as attribute</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0015.htm');">Typed Variables</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Declaring type…</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…might help the processor optimise</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…documents the variable</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…changes the way variable content is
  interpreted</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>as sequence constructor rather than
  temporary tree</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…doesn't do any extra casting</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0016.htm');">Consistent Variable Types</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Type of variable does not need to be
  consistent</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>declarative language</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>variable values aren't reassigned;
  rather a new declaration is now in scope</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0017.htm');">Typing Parameters</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Passing a value of the wrong type to a
  parameter gives an error</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>helps with utility templates/functions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>reduces requirement for error-checking
  code</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Polymorphism by declaring more general
  type</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>no union types allowed</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Be generous in what you accept…</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>reduces casting burden on users</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>declare more general type + extra
  internal tests to make sure that value meets criteria</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>built-in functions use xs:string rather
  than xs:anyURI</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>actual required type defined in
  documentation</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0034.htm');">Conclusions on Variables
&amp; Params</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Good practice to declare type of
  variable</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…but it doesn't do any casting for you</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>…but it doesn't mean that variable is
  always of that type</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Useful to declare type of parameter</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>helps user know when they're calling
  function in wrong way</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>being too specific in types of
  arguments increases burden on user</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>being too general hides actual required
  type</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>You don't need to do either</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0045.htm');">Do You Have To Learn It?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=4><font face=Arial size=2>Yes, you must:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>learn the type hierarchy</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>focus on the 12 or so useful types</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>learn the casting rules</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>which types can be cast to which others</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>how types are cast to each other</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>how untyped values get cast</font></td>
 </tr>
 <tr>
  <td colspan=4></td>
  <td colspan=1><font face=Arial size=2>especially with polymorphic operators</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=4><font face=Arial size=2>You might want to:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>learn how to declare types of variables</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0035.htm');">What Are the Benefits?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Date/time arithmetic and sorting</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Catch errors using first-item semantics</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Document and check types of parameters</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>There aren't very many…</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0046.htm');">What Can We Do?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Ways to reduce the learning burden</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>use simpler type system?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>have implicit casting (weak typing)?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>simplify casting rules?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>support typing of nodes (with built-in
  types)?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Encourage users to go Schema-Aware</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>increases the benefits of type-related
  changes</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0036.htm');">Conclusion</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>If the answers were easy…</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>At least, we should be honest about the
  impact of these changes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Send comments to:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>public-qt-comments@w3.org</font></td>
 </tr>
</table>

</p>

</body>

</html>
