<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTNts" )
  parent.location.href = "../Typing%20in%20Transformations.html";
//-->
</script>
</head>

<body bgcolor=white text=black>

<table border=0 width="100%">
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>This slide flags up the
  point that one of the benefits of providing the type of a variable in
  procedural languages is to ensure consistency -- that when the variable gets
  a new value assigned to it, the type of that new value has to be the same as
  the type declared for the variable. This isn't true in XSLT 2.0, because it's
  a declarative language; if you have two declarations for variables of the
  same name in the same scope, then the one that's closest is the one that's
  used, and there's no need for the type of the shadowing variable to be the
  same as that of the original. (This is something that perhaps we should check
  in XSLT.)</font><br>
  </td>
 </tr>
</table>

</body>

</html>
