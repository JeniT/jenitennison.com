<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTNts" )
  parent.location.href = "../Typing%20in%20Transformations.html";
//-->
</script>
</head>

<body bgcolor=white text=black>

<table border=0 width="100%">
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>The atomic type hierarchy
  is a bit overwhelming at first. It's particularly frustrating for those who
  have learned the WXS type system, since there are some subtle and some
  not-so-subtle changes between the WXS type system and the one used in XPath
  2.0, as described by the public comment from the XML Schema WG. But actually
  authors only have to worry about a few of the types in the hierarchy.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>On the plus side, the new
  types are really useful in some transformations: date/time arithmetic and
  sorting is a very common user request, so it's great that we now have support
  for that. On the minus side, using these types requires namespace declarations,
  which have to be declared in a stylesheet; this adds to the top of the
  stylesheet, but that part is usually automatically generated (or
  copied-and-pasted), so it's not a huge burden.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>Overall, the impact of the
  type hierarchy on users is mixed: there's a bit of a learning burden, but
  there are some advantages as well.</font><br>
  </td>
 </tr>
</table>

</body>

</html>
