<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTNts" )
  parent.location.href = "../Typing%20in%20Transformations.html";
//-->
</script>
</head>

<body bgcolor=white text=black>

<table border=0 width="100%">
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>This describes the current
  definition of conformance in XSLT 2.0. I assume the use of a Basic XSLT
  processor (rather than a Schema-Aware one) for the rest of the paper, for the
  four reasons given.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Verdana size=3>I think that Basic XSLT
  processors are going to be the most common kind in the near future, since
  building-in schema-awareness is quite a challenge. But even when Schema-Aware
  processors become available, people might choose to use a Basic XSLT
  processor, or to write stylesheets that don't take advantage of Schema-Aware
  features. Using only Basic XSLT features guarantees that the stylesheet is
  portable to those using Basic XSLT processors. Also, such processors are
  likely to be smaller and faster (since they don't have the overhead of
  schema-awareness). Finally, using only Basic XSLT features avoids the problem
  that you can't always guarantee access to a schema. (On the last point, we
  have the same problem with accessing DTDs in XSLT 1.0, and some people avoid
  using the id() function, using keys instead, for precisely this reason.)</font><br>
  </td>
 </tr>
</table>

</body>

</html>
